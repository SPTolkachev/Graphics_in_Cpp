#include <iostream>
//#include<conio.h> // в Linux g++ нет такой библиотеки для getch()
#include <cstdio>   // getchar() вместо getch()
#include <cmath>
//#include<math.h>
//#include <locale.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "parsemathex.cpp"

/*
 * Курсовая работа по "Программированию"
 * Тема курсовой работы #9:
 *		Разработка программы-калькулятора с разбором выражений.
 *		Написать программу-калькулятор. Вычисление выражения (например, 5+(12*55*(1-4)) ).
 *
 */




 /*
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Прототипы ф-ий ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 */

void	clearStr(char *str);
char  * ReadStrFromFille(char *fileName);
void	RecordStrToFille(char *fileName, char *expression, double answer);



 /*
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ main ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 */


int main(){
	//setlocale(LC_ALL, "Russian"); // Устанавливаем локаль
	std::cout << "Курсовая работа по \"Программированию\". Выполнил Толкачев С.П. (З-17ИВТ 2 МГ)\n\n\n";

	std::cout << "Правила использования калькулятора\n\n";
	std::cout << "1) В выражении допускается использование следующих математических операций: '+', '-', '*', '/'.\n\n";
	std::cout << "2) В выражении допускается использование скобок.\n\n";
	std::cout << "3) В выражении допускается использование следующих тригонометрических функций: 'cos()', 'sin()', 'tan()', 'ctan()'.";
	std::cout << " Внутри скобок тригономитрической функции допускается наличие вложенных математических выражений (например, 'cos(1+(2+3*4))').\n\n";
	std::cout << "4) В выражении допускается использование переменных.";
	std::cout << " Инициализировать переменную можно следующим образом: '$one = 1;', где 'one' - имя переменной, а '1' присваиваемое значение.";
	std::cout << " Так же при инициализации вместо числа можно указывать математическое выражение, которое будет рассчитано и преобразовано в число присваиваемое переменной (например, '$exp = 2 + (3 - 4 * 5);').";
	std::cout << " Начало имени переменной обозначется символом '$'.";
	std::cout << " Первым символом имени переменной может быть любая латинская буква [a-zA-Z] либо символ нижнего подчёркивания [_].";
	std::cout << " Вторым и последующими символами имени переменной могут быть любая латинская буква [a-zA-Z], цифра [0-9] либо символ нижнего подчёркивания [_].";
	std::cout << " Инициализация переменной ВСЕГДА должна заканчиваться символом точка с запятой ';'.";
	std::cout << " Если предполагается инициализация переменной внутри выражения присваиваемого другой переменной, то такое выражение должно быть заключено в круглые скобки (например, '$exp = ($three = 3; 2 + ($three - 4 * 5));').\n";

	std::cout << "-----------------------------------------------\n\n\n";


	char *expression; 
	char *initExpression; // Копия выражения
	double result;
	int typeInput = 0;


		int inputExpLength = 1;
			
		do {
			std::cout << "\nУкажите длинну вводимого математического выражения (всего символов с учётом пробельных символов; >1):\n";
			//scanf_s("%*c"); // чистим буфер
			std::cin >> inputExpLength;
		} while ( inputExpLength < 1 );
		

		//initExpression = (char*)malloc(sizeof(char) * ++inputExpLength);
		initExpression = new char(++inputExpLength);
		//expression = (char*)malloc(sizeof(char) * inputExpLength);
		expression = new char(inputExpLength);

		std::cout << "\nВведите математическое выражение для рассчёта (не более " << --inputExpLength << " символов):\n";
		//scanf_s("%*c"); // чистим буфер

		std::cin >> initExpression;

		if ( !fgets(expression, inputExpLength, stdin) ) {
			std::cout << "\nОшибка указания выражения.";
			getchar(); // ожидание нажатия клавиши
			exit(3); // завершаем программу и передаём код завершения
		}


	strcpy(expression, initExpression);
	
		std::cout << "[" << expression << "] [= ";
	
	/*if (strcpy(expression, initExpression)) { // Копируем выражение 
		std::cout << "\nОшибка: Не получилось копировать введённую строку.";
		getchar(); // ожидание нажатия клавиши
		exit(3); // завершаем программу и передаём код завершения
	}*/

	result = ParserMathExpression(expression);

	delete expression; // освобождаем память

	//Результат вычислений 
	std::cout << result << "]\n";

	/*
	int outputToFile = 0;
	std::cout << "\nЗаписать выражение с ответом в отдельный текстовый файл? { Нет (0) / Да (1) }\n";
	std::cin >> outputToFile;

	if (outputToFile) { // Запись выражения и ответа в файл
		char fullFileName[1024];

		std::cout << "\nВведите полное имя файла для записи: ";
		//scanf_s("%*c"); // чистим буфер
		if ( !fgets(fullFileName, 1023, stdin) ) {
			std::cout << "\nОшибка указания полного имени файла.\n";
			getchar(); // ожидание нажатия клавиши
			exit(3); // завершаем программу и передаём код завершения
		}
		std::cout << "\n";

		// Функция записи в файл
		RecordStrToFille(fullFileName, initExpression, result);
	}*/

	
	delete initExpression; // освобождаем память (копию выражения)

	std::cout << "\nПрограмма завершена. Нажмите любую клавишу для закрытия окна...";
	getchar(); // ожидание нажатия клавиши
}





/*
 * Чистка строки от символов перевода строки
 *
 * Чистит строку от символов перевода строки, полученную вводом в терминале
 * с помощью ф-ии fgets();
 *
 * @param char	* str - очищаемая строка
 *
 * @return void
 */
void clearStr(char *str) {
	int carentChar = 0;
	char c;
	while ((c = str[carentChar]) != '\0') {
		if (c == '\n' || c == '\r') {
			str[carentChar] = '\0';

			break;
		}
		carentChar++;
	}
}
